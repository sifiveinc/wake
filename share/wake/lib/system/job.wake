# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# JobKey: The values that the database uses to discern a unique job
#
# If all values of two jobs are identical, then the jobs are considered identical.
# Used to determine reuse eligibility.
export tuple JobKey =
    # The working directory of the job
    export dir: String
    # A string path to a file which should be passed as the stdin to a job
    export stdin: String
    # The environement that the job runs in
    export env: String
    # The commmand of the job
    export cmd: String
    # A unique hash used to discern two nearly identical jobs with some environmental change
    export signature: Integer
    # The list of files (separated by \0) that the job can see when running
    export visible: String
    # Boolean integer representing if the job should be launched such that it appears to be
    # launched directly by a human (ie launched interactively)
    export isatty: Integer

# Create/reserve a job handle, parameters aren't necessarily finalized
export def primJobCreate (label: String) (jobKey: JobKey) (keep: Integer) (echo: String) (stdout: String) (stderr: String) (runner_out: String) (runner_err: String): Job =
    def JobKey dir stdin env cmd signature visible isatty = jobKey

    (\_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ prim "job_create")
    label
    dir
    stdin
    env
    cmd
    signature
    visible
    keep
    echo
    stdout
    stderr
    runner_out
    runner_err
    isatty

# Immediately complete a job with the provided outputs without launching a process
export def primJobVirtual (job: Job) (stdout: String) (stderr: String) (usage: Usage): Unit =
    def Usage status runtime cputime membytes ibytes obytes = usage
    def runner_out = ""
    def runner_err = ""

    (\_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ prim "job_virtual")
    job
    stdout
    stderr
    runner_out
    runner_err
    status
    runtime
    cputime
    membytes
    ibytes
    obytes

# Launch the job via a child process. Values such as command or environment can be freely changed from the initial reservation.
export def primJobLaunch (job: Job) (jobKey: JobKey) (usage: Usage): Unit =
    def JobKey dir stdin env cmd _signature _visible isatty = jobKey
    def Usage status runtime cputime membytes ibytes obytes = usage

    (\_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ prim "job_launch")
    job
    dir
    stdin
    env
    cmd
    status
    runtime
    cputime
    membytes
    ibytes
    obytes
    isatty

# Complete a job before launch with userland defined failure
export def primJobFailLaunch (job: Job) (error: Error): Unit =
    def _ = (\_ \_ prim "job_fail_launch") job error
    def _ = unsafe_reportJobRunnerError job (error.getErrorCause)

    Unit

# Wrap `primJobFailLaunch` in the type signature required to satisfy `rmapFail`, for cases where
# a runner fails *before* delegating to `localRunner` or anything else which calls `primJobLaunch`.
export def markJobSetupFailure job err =
    def Unit = primJobFailLaunch job err

    Fail err

# Complete a job successfully by providing to the runtime the inputs/outputs/usage of the job
export def primJobFinish (job: Job) (inputs: String) (outputs: String) (all_outputs: String) (usage: Usage): Unit =
    def Usage status runtime cputime membytes ibytes obytes = usage

    (\_ \_ \_ \_ \_ \_ \_ \_ \_ \_ prim "job_finish")
    job
    inputs
    outputs
    all_outputs
    status
    runtime
    cputime
    membytes
    ibytes
    obytes

# Look up a job in the local database. Returns a completed Job handle with outputs already resolved if it is already cached
export def primJobCache (jobKey: JobKey): Pair (List Job) (List (Pair String String)) =
    def JobKey dir stdin env cmd signature visible isatty = jobKey

    (\_ \_ \_ \_ \_ \_ \_ prim "job_cache") dir stdin env cmd signature visible isatty

# Creates a hash of 5 elements
export def primHash5 a b c d e: Integer =
    (\_ \_ \_ \_ \_ prim "hash") a b c d e

# Helper function similar to cat with that adds a null byte after each string then combines them.
# Leaves a null byte as the last character of the string
def implode strings =
    cat (foldr (_, "\0", _) Nil strings)

# Helper function that hashs the signature parts of a job
def jobSignature cmd res fni fno keep =
    primHash5 cmd res fni fno keep

def runAlways cmd env dir stdin res uusage finputs foutputs vis keep run echo stdout stderr label isatty: Job =
    def hash = jobSignature cmd res finputs foutputs keep

    def visKey =
        vis
        | map getPathName
        | implode

    def jobKey = JobKey dir stdin env.implode cmd.implode hash visKey isatty.booleanToInteger

    def build Unit =
        def runner_out = getLogLevelName logInfo
        def runner_err = getLogLevelName logError

        def job =
            primJobCreate label jobKey keep.booleanToInteger echo stdout stderr runner_out runner_err

        def prefix = str (getJobId job)

        def usage =
            getJobRecord job
            | getOrElse uusage

        def RunnerOutput inputs outputs cleanable reality runnerError =
            run job (RunnerInput label cmd vis env dir stdin res prefix usage isatty finputs foutputs)

        def final _ =
            def hashedOutputs =
                outputs
                | computeHashes prefix
                | implode

            def _ = unsafe_primJobSetRunnerStatus job runnerError

            primJobFinish job inputs.implode hashedOutputs cleanable.implode reality

        # Make sure we don't hash files before the job has stopped running
        def _ = waitJobMerged final job

        job

    def confirm abort last job =
        # notOk cannot be deadcode eliminated thanks to printlnLevel having effects
        def notOk (Pair name hash) =
            if hashcode name ==* hash then
                Unit
            # The panic will not be deadcode dropped, because it's an alternative return of the effect-ful notOk
            else if abort then
                panic "The hashcode of output file '{name}' has changed from {hash} (when wake last ran) to {hashcode name} (when inspected this time). Presumably it was hand edited. Please move this file out of the way. Aborting the build to prevent loss of your data."
            else
                printlnLevel
                logError
                "Wake was run with '-c' and the hashcode of output file '{name}' has changed, despite being produced from identical inputs. In the prior run, it was {hash} and now it is {hashcode name}. Hashes of dependent jobs using this file will not be checked."

        def _ = waitJobMerged (\_ map notOk last) job

        job

    require True = keep
    else build Unit

    def cache = primJobCache jobKey

    match cache
        Pair (job, _) last -> confirm True last job
        Pair Nil last -> confirm False last (build Unit)

# Only run if the first four arguments differ
target runOnce cmd env dir stdin vis isatty run \ res usage finputs foutputs keep echo stdout stderr label =
    runAlways cmd env dir stdin res usage finputs foutputs vis keep run echo stdout stderr label isatty

export def runJobImp label cmd env dir stdin res usage finputs foutputs vis pers run (LogLevel echo) (LogLevel stdout) (LogLevel stderr) isatty =
    if isOnce pers then
        runOnce
        cmd
        env
        dir
        stdin
        vis
        isatty
        run
        res
        usage
        finputs
        foutputs
        (isKeep pers)
        echo
        stdout
        stderr
        label
    else
        runAlways
        cmd
        env
        dir
        stdin
        res
        usage
        finputs
        foutputs
        vis
        (isKeep pers)
        run
        echo
        stdout
        stderr
        label
        isatty

export def runJobWith (Runner _ run) (Plan label cmd vis env dir stdin stdout stderr echo pers res usage finputs foutputs isatty) =
    runJobImp label cmd env dir stdin res usage finputs foutputs vis pers run echo stdout stderr isatty

# Set the value of a tag on a Job
# This is useful for post-build reflection into the database
export def setJobTag (key: String) (value: String) (job: Job): Job =
    def p job key value = prim "job_tag"
    def _ = p job key value

    job

# Set a special tag to tell db inspection that this job shouldn't be shown by default
export def setJobInspectVisibilityHidden (job: Job): Job =
    job
    | setJobTag "inspect.visibility" "hidden"

def toUsage (Pair (Pair status runtime) (Pair (Pair cputime membytes) (Pair ibytes obytes))) =
    Usage status runtime cputime membytes ibytes obytes

def getJobReality (job: Job): Result Usage Error =
    def raw job = prim "job_reality"

    raw job
    | rmap toUsage

def waitJobMerged (f: Unit => a) (job: Job): a =
    def raw job = prim "job_reality"

    wait (\_ f Unit) (raw job)

# Actual usage of a finished job
export def getJobReport (job: Job): Result Usage Error =
    def raw job = prim "job_report"

    raw job
    | rmap toUsage

# From database, available the moment a Job exists
export def getJobRecord (job: Job): Option Usage =
    def raw job = prim "job_record"

    raw job
    | at 0
    | omap toUsage

# Control a running/finished Job
def stdio job fd =
    prim "job_output" # 1=stdout, 2=stderr; blocks till closed

def tree job typ =
    prim "job_tree" # 0=visible, 1=input, 2=output; blocks till finished

def treeOk file =
    def Pair f h = file

    match h
        "BadHash" -> failWithError "Could not hash {f}"
        _ -> Pass (Path f h)

def guardPath job = match _
    Fail e -> Fail e
    Pass l if job.isJobOk -> findFailFn treeOk l
    _ ->
        # Check if it's a runner failure, if not then we know its a job failure
        def runnerFailure = match (unsafe_getJobRunnerStatus job)
            Pass (Some msg) -> "Runner failed with error {msg}"
            _ -> "Non-zero exit status ({format job.getJobStatus})"

        failWithError "{runnerFailure} for job {str job.getJobId}: '{job.getJobDescription}'"

def mapPath = match _
    Fail e -> Fail e
    Pass l -> findFailFn treeOk l

export def getJobStdoutRaw (job: Job): Result String Error =
    require Exited 0 = getJobStatus job
    else failWithError "job terminated with non-zero exit code"

    stdio job 1

export def getJobStderrRaw (job: Job): Result String Error =
    require Exited 0 = getJobStatus job
    else failWithError "job terminated with non-zero exit code"

    stdio job 2

# Gives the full stdout of a job as a string, without any manipulation.
# Returns the result successfully as long as the job was successfully launched
# and closed its stdout handle at some point during its execution. This
# generally occurs by the process simply terminating. The only case where
# this would return a failure is if the job did not successfully launch.
export def getJobFailedStdoutRaw (job: Job): Result String Error =
    stdio job 1

# Gives the full stderr of a job as a string, without any manipulation.
# Returns the result successfully as long as the job was successfully launched
# and closed its stderr handle at some point during its execution. This
# generally occurs by the process simply terminating. The only case
# in which this would return a failure is if the job did not successfully
# launch.
export def getJobFailedStderrRaw (job: Job): Result String Error =
    stdio job 2

# Gives the job's stdout if the job exited with an exit
# code of zero. The output will be manipulated to not contain
# ANSI escape codes.
export def getJobStdout (job: Job): Result String Error =
    require Pass stdout = getJobStdoutRaw job

    Pass (stdout | filterTerminalCodes)

# Gives the job's stderr if the job exited with an exit
# code of zero. The output will be manipulated to not contain
# ANSI escape codes.
export def getJobStderr (job: Job): Result String Error =
    require Pass stderr = getJobStderrRaw job

    Pass (stderr | filterTerminalCodes)

# Gives the job's stdout if the job was launched successfully
# and closed its stdout at some point. The output will be
# manipulated to not contain ANSI escape codes.
export def getJobFailedStdout (job: Job): Result String Error =
    require Pass stdout = getJobFailedStdoutRaw job

    Pass (stdout | filterTerminalCodes)

# Gives the job's stdout if the job was launched successfully
# and closed its stdout at some point. The output will be
# manipulated to not contain ANSI escape codes.
export def getJobFailedStderr (job: Job): Result String Error =
    require Pass stderr = getJobFailedStderrRaw job

    Pass (stderr | filterTerminalCodes)

# Get the runner output from a job.
# Runner output is separate from job stdout and is used by the runner infrastructure
# to report information about how the job was executed, rather than output from the
# job itself. These reportings are communicated via the fd3 stream, which runner scripts
# can write to inorder to report information to Wake. Result returns an empty string if there is
# no runner output, and is also stored in the Wake db. Since runner outputs are not cached, a cached
# result will have an empty runner output.
#
# Marked unsafe as Runner output is not cached and cannot guarantee reproduciblity.
export def unsafe_getJobRunnerOutput (job: Job): Result String Error =
    (\j \_ prim "job_runner_output") job 1

# Get the runner error from a job.
# Runner error is separate from job stderr and is used by the runner infrastructure
# to report errors that occurred while trying to execute the job, rather than errors from the
# job itself. Runner scripts as well as runners can write to the fd4 stream to report errors.
# Result returns an empty string if there is no runner error, and is also stored in the Wake db.
# Since runner errors are not cached, a cached result will have an empty runner error.
#
# Marked unsafe as Runner error is not cached and cannot guarantee reproduciblity.
export def unsafe_getJobRunnerError (job: Job): Result String Error =
    (\j \_ prim "job_runner_output") job 2

# Report a runner output for a job.
# This is used to report out runner infrastructure information observed from Wake. Similar to runner scripts,
# runners themselves can write to the fd3 stream to report information via this function. Multiple calls to
# this function for a specific job will append to the runner output message that is saved to the Wake db.
#
# Marked unsafe as this function should only be called for over-the-wall reporting for runners and because
# of its uncacheablity as runner outputs are not cached.
export def unsafe_reportJobRunnerOutput (job: Job) (output: String): Job =
    (\j \o prim "job_report_runner_output") job output

# Report a runner error for a job.
# This is used to report out runner infrastructure errors observed from Wake. Similar to runner scripts,
# runners themselves can write to the fd4 stream to report errors via this function. Multiple calls to
# this function for a specific job will append to the runner error message that is saved to the Wake db.
#
# Marked unsafe as this function should only be called for over-the-wall reporting for runners and because
# of its uncacheablity as runner errors are not cached.
export def unsafe_reportJobRunnerError (job: Job) (error: String): Job =
    (\j \e prim "job_report_runner_error") job error

# Set a runner status for a job
# The runner status code is used to determine if the runner that a job ran on succeeded (0) or failed (> 0).
# Since runner status is not inherrient to a jobs execution, runners should manually set the status through
# this out-of-band mechanism for both Wake related reporting as well as for runner scripts that are considered to
# be an extension of the runner. A job's runner status is default set to be 0.
def unsafe_primJobSetRunnerStatus (job: Job) (status: Option Error): Unit = match status
    None -> (\_ prim "job_clear_runner_status") job
    # Just pass in the String, since the database isn't going to store the stack trace anyway.
    Some err -> (\_ \_ prim "job_set_runner_status") job err.getErrorCause

# Get the runner status from a job.
# The runner status code is used to determine if the runner that a job ran on succeeded (0) or failed (> 0).
# Jobs that have a failed runner status are not cached.
#
# Marked unsafe as Runner status is not cached and cannot guarantee reproduciblity.
export def unsafe_getJobRunnerStatus (job: Job): Result (Option String) Error =
    def raw job = prim "job_runner_status"

    raw job
    | rmap getFail

export def getJobInputs (job: Job): Result (List Path) Error =
    tree job 1
    | guardPath job

export def getJobOutputs (job: Job): Result (List Path) Error =
    tree job 2
    | guardPath job

export def getJobFailedInputs (job: Job): Result (List Path) Error =
    tree job 1
    | mapPath

export def getJobFailedOutputs (job: Job): Result (List Path) Error =
    tree job 2
    | mapPath

export def getJobId (job: Job): Integer =
    (\j prim "job_id") job

export def getJobDescription (job: Job): String =
    (\j prim "job_desc") job

export def getJobOutput (job: Job): Result Path Error =
    require Pass outputs = getJobOutputs job

    match outputs
        Nil ->
            failWithError "No outputs available from job {str job.getJobId}: '{job.getJobDescription}'"
        (singleOutput, Nil) -> Pass singleOutput
        _ ->
            failWithError "More than one output found from job {str job.getJobId}: '{job.getJobDescription}'"

export def isJobOk (job: Job): Boolean =
    def jobSuccess = match (getJobReport job)
        Fail _ -> False
        Pass u -> u.getUsageStatus == 0

    # If the job succeeded, also check if the runner was successful
    if jobSuccess then
        match (unsafe_getJobRunnerStatus job)
            Fail _ -> False
            Pass status -> isNone status
    else
        False

export data Status =
    Exited Integer
    Signaled Integer
    Aborted Error

export def getJobStatus (job: Job): Status = match (getJobReport job)
    Fail f -> Aborted f
    Pass u ->
        def status = u.getUsageStatus

        if status >= 0 then
            Exited status
        else
            Signaled (-status)

# Location of the wake executable
export def wakePath: String =
    prim "execpath"

export def rOK: Integer =
    0

export def wOK: Integer =
    1

export def xOK: Integer =
    2

export def access (file: String) (mode: Integer): Boolean =
    (\f \m prim "access") file mode
